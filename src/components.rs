//! Game components for Bevy ECS

use bevy::prelude::*;
use serde::{Deserialize, Serialize};

/// Player progress in idle mechanics
#[derive(Component, Debug, Clone, Serialize, Deserialize)]
pub struct IdleProgress {
    pub resources: f32,
    pub experience: f32,
    pub level: u32,
    pub last_update: f64,
}

impl Default for IdleProgress {
    fn default() -> Self {
        Self {
            resources: 0.0,
            experience: 0.0,
            level: 1,
            last_update: 0.0,
        }
    }
}

/// Position component for entities
#[derive(Component, Debug, Clone)]
pub struct Position {
    pub x: f32,
    pub y: f32,
}

/// Player entity marker
#[derive(Component)]
pub struct Player;

/// Map tile component
#[derive(Component, Debug, Clone)]
pub struct MapTile {
    pub tile_type: TileType,
    pub grid_x: i32,
    pub grid_y: i32,
}

/// Types of map tiles
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum TileType {
    Empty,
    Resource,
    Enemy,
    Quest,
    Portal,
}

/// SFT asset component
#[derive(Component, Debug, Clone, Serialize, Deserialize)]
pub struct SFTAsset {
    pub token_id: String,
    pub attributes: SFTAttributes,
    pub staked: bool,
}

/// SFT attributes generated by AI
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SFTAttributes {
    pub quest_id: u32,
    pub map_seed: i64,
    pub rarity: Rarity,
    pub power: u32,
    pub metadata: String,
}

/// Rarity levels for SFTs
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum Rarity {
    Common,
    Uncommon,
    Rare,
    Epic,
    Legendary,
}

/// Network player component for multiplayer
#[derive(Component, Debug, Clone)]
pub struct NetworkPlayer {
    pub peer_id: u32,
    pub username: String,
    pub connected: bool,
}

/// Quest component
#[derive(Component, Debug, Clone, Serialize, Deserialize)]
pub struct Quest {
    pub id: u32,
    pub name: String,
    pub description: String,
    pub completed: bool,
    pub reward_resources: f32,
    pub reward_sft: Option<SFTAttributes>,
}